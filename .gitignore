#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    ArmLeft,        sensorPotentiometer)
#pragma config(Sensor, in2,    ArmRight,       sensorPotentiometer)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           LeftLift,      tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           RightArmLeft,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           RightArmRight, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           LeftArmRight,  tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           LeftArmLeft,   tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           LeftBack,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           LeftFront,     tmotorVex393_MC29, openLoop, encoderPort, I2C_2)
#pragma config(Motor,  port8,           RightFront,    tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_1)
#pragma config(Motor,  port9,           RightBack,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          RightLift,     tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{

//Left Side Is I2C_1
	nMotorEncoder[I2C_1] = 0;//sets Encoders to zero
	nMotorEncoder[I2C_2] = 0;

While (true) 
{

motor[LeftArmLeft] = 100;
motor[LeftArmRight] = 100;
motor[RightArmLeft] = 100;
motor[RightArmRight] = 100;
wait1Msec(1000);

motor[LeftArmLeft] = 0;
motor[LeftArmRight] = 0;
motor[RightArmLeft] = 0;
motor[RightArmRight] = 0;
wait1Msec(1000);

if (SensorValue[I2C_1] <1800 && SensorValue[I2C_2] < 1800)
{
motor[LeftFront] = 127;
motor[LeftBack] = 127;
motor[RightFront] = 127;
motor[RightBack] = 127; 
}

else
{
motor[LeftFront] = 0;
motor[LeftBack] = 0;
motor[RightFront] = 0;
motor[RightBack] = 0; 
}

if (SensorValue[I2C_1] < 1800)
{
motor[LeftFront] =127;
motor[LeftBack] = 127;
motor[RightFront] = -127;
motor[RightBack] = -127;
}

else
{
motor[LeftFront] = 0;
motor[LeftBack] = 0;
motor[RightFront] = 0;
motor[RightBack] = 0;


}
